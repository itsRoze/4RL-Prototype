drop policy "Enable insert for authenticated users only" on "public"."user_info";

drop policy "Enable read access for all users" on "public"."user_info";

revoke delete on table "public"."user_info" from "anon";

revoke insert on table "public"."user_info" from "anon";

revoke references on table "public"."user_info" from "anon";

revoke select on table "public"."user_info" from "anon";

revoke trigger on table "public"."user_info" from "anon";

revoke truncate on table "public"."user_info" from "anon";

revoke update on table "public"."user_info" from "anon";

revoke delete on table "public"."user_info" from "authenticated";

revoke insert on table "public"."user_info" from "authenticated";

revoke references on table "public"."user_info" from "authenticated";

revoke select on table "public"."user_info" from "authenticated";

revoke trigger on table "public"."user_info" from "authenticated";

revoke truncate on table "public"."user_info" from "authenticated";

revoke update on table "public"."user_info" from "authenticated";

revoke delete on table "public"."user_info" from "service_role";

revoke insert on table "public"."user_info" from "service_role";

revoke references on table "public"."user_info" from "service_role";

revoke select on table "public"."user_info" from "service_role";

revoke trigger on table "public"."user_info" from "service_role";

revoke truncate on table "public"."user_info" from "service_role";

revoke update on table "public"."user_info" from "service_role";

alter table "public"."user_info" drop constraint "public_user_info_auth_id_fkey";

alter table "public"."user_info" drop constraint "user_info_pkey";

drop index if exists "public"."user_info_pkey";

drop table "public"."user_info";

create table "public"."profile" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "auth_id" uuid,
    "completed_questionnaire" boolean not null default false
);


alter table "public"."profile" enable row level security;

CREATE UNIQUE INDEX user_info_pkey ON public.profile USING btree (id);

alter table "public"."profile" add constraint "user_info_pkey" PRIMARY KEY using index "user_info_pkey";

alter table "public"."profile" add constraint "public_user_info_auth_id_fkey" FOREIGN KEY (auth_id) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."profile" validate constraint "public_user_info_auth_id_fkey";

grant delete on table "public"."profile" to "anon";

grant insert on table "public"."profile" to "anon";

grant references on table "public"."profile" to "anon";

grant select on table "public"."profile" to "anon";

grant trigger on table "public"."profile" to "anon";

grant truncate on table "public"."profile" to "anon";

grant update on table "public"."profile" to "anon";

grant delete on table "public"."profile" to "authenticated";

grant insert on table "public"."profile" to "authenticated";

grant references on table "public"."profile" to "authenticated";

grant select on table "public"."profile" to "authenticated";

grant trigger on table "public"."profile" to "authenticated";

grant truncate on table "public"."profile" to "authenticated";

grant update on table "public"."profile" to "authenticated";

grant delete on table "public"."profile" to "service_role";

grant insert on table "public"."profile" to "service_role";

grant references on table "public"."profile" to "service_role";

grant select on table "public"."profile" to "service_role";

grant trigger on table "public"."profile" to "service_role";

grant truncate on table "public"."profile" to "service_role";

grant update on table "public"."profile" to "service_role";

create policy "Enable insert for authenticated users only"
on "public"."profile"
as permissive
for all
to authenticated
using ((auth.uid() = auth_id));


create policy "Enable read access for all users"
on "public"."profile"
as permissive
for select
to public
using (true);



