create type "public"."match_status" as enum ('pending', 'accepted');

create table "public"."match" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "to_user" uuid,
    "from_user" uuid,
    "status" match_status not null default 'pending'::match_status,
    "question_to_show" bigint,
    "matchmaking_score" text
);


alter table "public"."match" enable row level security;

alter table "public"."answer" add column "auth_id" uuid not null;

alter table "public"."answer" alter column "response" set not null;

alter table "public"."profile" add column "name" text;

CREATE UNIQUE INDEX notifications_pkey ON public.match USING btree (id);

CREATE UNIQUE INDEX profile_auth_id_key ON public.profile USING btree (auth_id);

CREATE UNIQUE INDEX question_auth_unique ON public.answer USING btree (question_id, auth_id);

alter table "public"."match" add constraint "notifications_pkey" PRIMARY KEY using index "notifications_pkey";

alter table "public"."answer" add constraint "answer_response_check" CHECK ((length(response) < 300)) not valid;

alter table "public"."answer" validate constraint "answer_response_check";

alter table "public"."answer" add constraint "public_answer_auth_id_fkey" FOREIGN KEY (auth_id) REFERENCES profile(auth_id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."answer" validate constraint "public_answer_auth_id_fkey";

alter table "public"."answer" add constraint "question_auth_unique" UNIQUE using index "question_auth_unique";

alter table "public"."match" add constraint "public_notification_from_user_fkey" FOREIGN KEY (from_user) REFERENCES profile(auth_id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."match" validate constraint "public_notification_from_user_fkey";

alter table "public"."match" add constraint "public_notification_question_to_show_fkey" FOREIGN KEY (question_to_show) REFERENCES questionnaire(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."match" validate constraint "public_notification_question_to_show_fkey";

alter table "public"."match" add constraint "public_notification_to_user_fkey" FOREIGN KEY (to_user) REFERENCES profile(auth_id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."match" validate constraint "public_notification_to_user_fkey";

alter table "public"."profile" add constraint "profile_auth_id_key" UNIQUE using index "profile_auth_id_key";

alter table "public"."profile" add constraint "profile_name_check" CHECK ((length(name) < 50)) not valid;

alter table "public"."profile" validate constraint "profile_name_check";

grant delete on table "public"."match" to "anon";

grant insert on table "public"."match" to "anon";

grant references on table "public"."match" to "anon";

grant select on table "public"."match" to "anon";

grant trigger on table "public"."match" to "anon";

grant truncate on table "public"."match" to "anon";

grant update on table "public"."match" to "anon";

grant delete on table "public"."match" to "authenticated";

grant insert on table "public"."match" to "authenticated";

grant references on table "public"."match" to "authenticated";

grant select on table "public"."match" to "authenticated";

grant trigger on table "public"."match" to "authenticated";

grant truncate on table "public"."match" to "authenticated";

grant update on table "public"."match" to "authenticated";

grant delete on table "public"."match" to "service_role";

grant insert on table "public"."match" to "service_role";

grant references on table "public"."match" to "service_role";

grant select on table "public"."match" to "service_role";

grant trigger on table "public"."match" to "service_role";

grant truncate on table "public"."match" to "service_role";

grant update on table "public"."match" to "service_role";

create policy "Enable ALL for users based on auth_id"
on "public"."answer"
as permissive
for all
to public
using ((auth.uid() = auth_id))
with check ((auth.uid() = auth_id));


create policy "Enable read access for all users"
on "public"."answer"
as permissive
for select
to public
using (true);


create policy "Enable read access for all users"
on "public"."match"
as permissive
for select
to public
using (true);


create policy "Enable read access for all users"
on "public"."questionnaire"
as permissive
for select
to public
using (true);



